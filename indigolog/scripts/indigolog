#!/usr/bin/env python

import roslib; roslib.load_manifest('indigolog')
import roslib.packages
import sys
import threading
import signal
import rospy
import time
import tf
import actionlib
import pyclp
from move_base_msgs.msg import *
from eclipse_prolog import *
from memory.lib import *
from Queue import Queue

class Indigolog(EclipseProlog):
    def __init__(self):
        EclipseProlog.__init__(self)
        self.exog_queue = Queue()

        # ROS memory integration:
        print('Creating the memory listener...')
        self.memory_listener = MemoryListener(callback_add=self.memory_add_callback, callback_remove=self.memory_remove_callback, callback_change=self.memory_change_callback)
        # send add events for every term in the memory:
        for meta in self.memory_listener.store.get_all():
            self.memory_add_callback(meta, meta.src)

        # compile helper predicates:
        self.compile(roslib.packages.get_pkg_dir('indigolog') + '/src/indigolog_interface.pl')
        # and indigolog interpreter:
        #self.compile('/opt/indigolog/Interpreters/indigolog-vanilla.pl')

    def run_controller(self, proc_name):
        return self.post_goal(pyclp.Compound('indigolog', pyclp.Atom(proc_name)))

    def yield_callback_say_1(self, what):
        if type(what) == pyclp.PList:
            what = ''.join(str(w) for w in what)
        print('>>> ' + str(what))
        return pyclp.Atom('1')

    def yield_callback_sleep_1(self, sleep_time):
        time.sleep(float(sleep_time))
        return pyclp.Atom('1')

    def yield_callback_memory_read_1(self, term_id):
        term_id = str(term_id)
        try:
            meta = self.memory_listener.store.read(term_id)
            print('    memory_read(%s) -> %s' % (term_id, termmsg2str(meta.term)))
            return termmsg2pyclpterm(meta.term)
        except:
            return pyclp.Var()

    def yield_callback_memory_write_2(self, term_id, term):
        term_id = str(term_id)
        term = pyclpterm2termmsg(term)
        self.memory_listener.client.write(term_id, term)
        return pyclp.Atom('1')

    def yield_callback_memory_remove_1(self, term_id):
        term_id = str(term_id)
        self.memory_listener.client.remove(term_id)
        return pyclp.Atom('1')

    def yield_callback_check_exog_occurs_0(self):
        if not self.exog_queue.empty():
            exog = self.exog_queue.get()
            #rospy.loginfo('deliver exog: ' + str(exog))
            return exog
        return pyclp.Atom('none')

    def topic_callback(self, data, topic_name):
        EclipseProlog.topic_callback(self, data, topic_name)
        self.exog_queue.put(pyclp.Compound('topic', pyclp.Atom(topic_name), msg2term(data)))

    def action_done_callback(self, goal_id, state, result):
        state = actionlib.GoalStatus.to_string(state).lower()
        self.exog_queue.put(pyclp.Compound('action_end', pyclp.Atom(goal_id), pyclp.Atom(state), msg2term(result)))

    #def action_active_callback(self, goal_id):
    #    pass

    def action_feedback_callback(self, goal_id, feedback):
        self.exog_queue.put(pyclp.Compound('action_feedback', pyclp.Atom(goal_id), msg2term(feedback)))

    def memory_add_callback(self, meta, src):
        self.exog_queue.put(pyclp.Compound('memory_add', pyclp.Atom(meta.term_id), termmsg2pyclpterm(meta.term), src))

    def memory_remove_callback(self, meta, src):
        self.exog_queue.put(pyclp.Compound('memory_remove', pyclp.Atom(meta.term_id), pyclp.Atom(src)))

    def memory_change_callback(self, meta, src):
        self.exog_queue.put(pyclp.Compound('memory_change', pyclp.Atom(meta.term_id), termmsg2pyclpterm(meta.term), pyclp.Atom(src)))

    def subprocess_output_callback(self, process_id, stream, line):
        self.exog_queue.put(pyclp.Compound('subprocess_output', pyclp.Atom(process_id), pyclp.Atom(stream), pyclp.Atom(line)))

    def subprocess_end_callback(self, process_id, exit_code):
        self.exog_queue.put(pyclp.Compound('subprocess_end', pyclp.Atom(process_id), pyclp.Term(exit_code)))

    def call_service_async_callback(self, result, service_name, call_id):
        #call_id = pyclp.Atom()
        self.exog_queue.put(pyclp.Compound('service_async_result', srv2term(result), pyclp.Atom(service_name), pyclp.Atom(call_id)))

if __name__ == "__main__":
    rospy.init_node('indigolog')
    argv = rospy.myargv()

    if len(argv) <= 1:
        print('Usage: rosrun indigolog indigolog <file> [controller_proc]')
        print('')
        print('Arguments:')
        print(' file             a script containing indigolog KB and controller')
        print(' controller_proc  the name of the main proc (default: control)')
        print('')
        sys.exit(1)

    print('Starting indigolog...')
    indigolog = Indigolog()

    src = argv[1]
    print('Compiling Prolog code (%s)...' % src)
    indigolog.compile(src)

    controller_proc = argv[2] if len(argv) > 2 else 'control'
    print('Start indigolog control loop (%s)...' % controller_proc)
    ret = indigolog.run_controller(controller_proc)

    print('Terminated successfully' if ret else 'Terminated with error')


