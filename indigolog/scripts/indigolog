#!/usr/bin/env python

import roslib; roslib.load_manifest('indigolog')
import roslib.packages
import sys
import threading
import signal
import rospy
import time
import tf
from actionlib import SimpleActionClient, SimpleGoalState
import pyclp
from move_base_msgs.msg import *
from eclipse_prolog import *
from memory.lib import *
from Queue import Queue

# ROS memory translation utils:
def termmsg_to_pyclp(term):
    return pyclp.Compound(term.functor, list(pyclp.Atom(str(atom_get(atom))) for atom in term.args))

def pyclpterms_to_atommsglist(args):
    ret = []
    for arg in args:
        if type(arg) == pyclp.Compound:
            raise Exception('Higher order term not allowed')
        if type(arg) != pyclp.Atom:
            raise Exception('Unsupported atom of type %s' % type(arg))
        ret.append(atom_parse(str(arg)))
    return ret

def pyclpterm_to_msg(term):
    if type(term) == pyclp.Atom:
        return Term(functor='', args=[atom_parse(str(term))])
    if type(term) == pyclp.Compound:
        return Term(functor=term.functor(), args=pyclpterms_to_atommsglist(term.arguments()))
    if type(term) in [int, str, float]:
        return Term(functor='', args=[atom_parse(term)])
    raise Exception('wtf term - guru meditation code 65438')



class Indigolog(EclipseProlog):
    def __init__(self):
        EclipseProlog.__init__(self)
        self.exog_queue = Queue()

        # ROS memory integration:
        print('Creating the memory listener...')
        self.memory_listener = MemoryListener(callback_add=self.memory_add_callback, callback_remove=self.memory_remove_callback, callback_change=self.memory_change_callback)
        # send add events for every term in the memory:
        for meta in self.memory_listener.store.get_all():
            self.memory_add_callback(meta, meta.src)

        # compile helper predicates:
        self.compile(roslib.packages.get_pkg_dir('indigolog') + '/src/indigolog_interface.pl')

    def run_controller(self, proc_name):
        return self.post_goal(pyclp.Compound('indigolog', pyclp.Atom(proc_name)))

    def yield_callback_say_1(self, what):
        if type(what) == pyclp.PList:
            what = ''.join(str(w) for w in what)
        print('>>> ' + str(what))
        return pyclp.Atom('1')

    def yield_callback_sleep_1(self, sleep_time):
        time.sleep(float(sleep_time))
        return pyclp.Atom('1')

    def yield_callback_memory_read_1(self, term_id):
        term_id = str(term_id)
        try:
            meta = memory_listener.store.read(term_id)
            print('    memory_read(%s) -> %s' % (term_id, term_to_string(meta.term)))
            return self.termmsg_to_pyclp(meta.term)
        except:
            return pyclp.Var()

    def yield_callback_memory_write_2(self, term_id, term):
        term_id = str(term_id)
        term = self.pyclpterm_to_msg(term)
        memory_listener.client.write(term_id, term)
        return pyclp.Atom('1')

    def yield_callback_memory_remove_1(self, term_id):
        term_id = str(term_id)
        memory_listener.client.remove(term_id)
        return pyclp.Atom('1')

    def yield_callback_check_exog_occurs_0(self):
        if not self.exog_queue.empty():
            exog = self.exog_queue.get()
            #rospy.loginfo('deliver exog: ' + str(exog))
            return exog
        return pyclp.Atom('none')

    def topic_callback(self, data, topic_name):
        EclipseProlog.topic_callback(self, data, topic_name)
        self.exog_queue.put(pyclp.Compound('topic', pyclp.Atom(topic_name), msg2term(data)))

    def memory_add_callback(self, meta, src):
        self.exog_queue.put(pyclp.Compound('memory_add', pyclp.Atom(meta.term_id), termmsg_to_pyclp(meta.term), src))

    def memory_remove_callback(self, meta, src):
        self.exog_queue.put(pyclp.Compound('memory_remove', pyclp.Atom(meta.term_id), pyclp.Atom(src)))

    def memory_change_callback(self, meta, src):
        self.exog_queue.put(pyclp.Compound('memory_change', pyclp.Atom(meta.term_id), termmsg_to_pyclp(meta.term), pyclp.Atom(src)))


if __name__ == "__main__":
    rospy.init_node('indigolog')
    argv = rospy.myargv()

    if len(argv) <= 1:
        print('Usage: rosrun indigolog indigolog <file> [controller_proc]')
        print('')
        print('Arguments:')
        print(' file             a script containing indigolog KB and controller')
        print(' controller_proc  the name of the main proc (default: control)')
        print('')
        sys.exit(1)

    print('Starting indigolog...')
    indigolog = Indigolog()

    src = argv[1]
    print('Compiling Prolog code (%s)...' % src)
    indigolog.compile(src)

    controller_proc = argv[2] if len(argv) > 2 else 'control'
    print('Start indigolog control loop (%s)...' % controller_proc)
    ret = indigolog.run_controller(controller_proc)

    print('Terminated successfully' if ret else 'Terminated with error')


